import { Telegraf } from "telegraf";
import { IBotContext } from "../context/context.interface";
import { convertIdToGenre } from "../libs/utils";
import { MovieDetail } from "../types/movie-api";
import { SessionData } from "../types";

export default new (class Menu {
  createStartMenuText(): string {
    return "–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ —Å –±–æ—Ç–æ–º –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∏–∂—á–µ";
  }

  createMainMenuText(session: SessionData): string {
    const date: Date = new Date(session.createdAt);
    date.setHours(date.getHours());

    const options: Intl.DateTimeFormatOptions = {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    };
    const formattedDate = new Intl.DateTimeFormat("ru-RU", options).format(
      date
    );

    return `üÜî ${session.id}\nüïó –î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó ${formattedDate}\n\n–ü—Ä–∏—î–º–Ω–æ–≥–æ –ø–æ—à—É–∫—É!`;
  }

  createFilterMenuText(session: SessionData): string {
    const genre = !session.genre.length
      ? "–£—Å—ñ"
      : convertIdToGenre(session.genre).join(", ");

    return (
      "–ú–µ–Ω—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤\n\n" +
      "–í–∏–±–µ—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ —ñ —Ç–∏—Å–Ω–∏ \"–®—É–∫–∞—Ç–∏ –∑–∞ —Ñ—ñ–ª—å—Ç—Ä–æ–º\"\n\n" +
      "–û–±—Ä–∞–Ω–æ:\n" +
      `üìà –†–µ–π—Ç–∏–Ω–≥: ${session.minRating} - ${session?.maxRating}\n` +
      `üìÖ –ü–æ—á–∏–Ω–∞—é—á–∏ –∑ —Ä–æ–∫—É: ${session.startYear}\n` +
      `üìÜ –î–æ —Ä–æ–∫—É: ${session.endYear}\n` +
      `üéµ –ñ–∞–Ω—Ä: ${genre}\n`
    );
  }

  createErrorMenu(): string {
    return "–¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–µ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –Ω–∏–º, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏.";
  }

  createMovieMenu(fields: MovieDetail): string {
    const genres: string[] = fields.genres.map((genre) => genre.name);

    return (
      `${fields.title}\n\n` +
      `–ñ–∞–Ω—Ä: ${genres.join(", ")}\n` +
      `–†–µ–π—Ç–∏–Ω–≥: ${fields.vote_average || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"}\n` +
      `–í–∏–π—à–æ–≤: ${fields.status}\n` +
      `–û–ø–∏—Å:\n${fields.overview}`
    );
  }

  updateMenuText(
    bot: Telegraf<IBotContext>,
    userId: number,
    data: "menu" | "filter" | "movie",
    id?: string
  ): void {
    const uniqueNumber: number = new Date().getTime();
    bot.handleUpdate({
      update_id: uniqueNumber,
      callback_query: {
        id: id || uniqueNumber.toString(),
        from: {
          id: userId,
          is_bot: false,
          first_name: uniqueNumber.toString(),
        },
        message: undefined,
        chat_instance: uniqueNumber.toString(),
        data,
      },
    });
  }
})();
