import { Telegraf } from "telegraf";
import { IBotContext, SessionData } from "../context/context.interface";
import { convertIdToGenre } from "../libs/utils";
import { MovieDetail } from "../service/movie-api.interface";

export default new class Menu {
  createStartMenuText(): string {
    return "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–æ–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ";
  }

  createMainMenuText(session: SessionData): string {
    const date = session.createdAt;
    date.setHours(date.getHours());

    const options: Intl.DateTimeFormatOptions = {
      day: "2-digit",
      month: "2-digit",
      year: "numeric"
    };
    const formattedDate = new Intl.DateTimeFormat("ru-RU", options).format(date);

    return `üÜî ${session.id}\nüïó –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ${formattedDate}\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞!`;
  }

  createFilterMenuText(session: SessionData): string {
    const genre = !session.genre.length 
      ? "–í—Å–µ"
      : convertIdToGenre(session.genre).join(", ");
      
    return (
      "–ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤\n\n" +
      "–í—ã–±–µ—Ä–∏ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –∂–º–∏ \"–ò—Å–∫–∞—Ç—å –ø–æ —Ñ–∏–ª—å—Ç—Ä—É\`\n\n" +
      "–í—ã–±—Ä–∞–Ω–æ:\n" +
      `üìà –†–µ–π—Ç–∏–Ω–≥: ${session.minRating} - ${session?.maxRating}\n` +
      `üìÖ –ù–∞—á–∏–Ω–∞—è —Å –≥–æ–¥–∞: ${session.startYear}\n` +
      `üìÜ –î–æ –≥–æ–¥–∞: ${session.endYear}\n` +
      `üéµ –ñ–∞–Ω—Ä: ${genre}\n`
    );
  }

  createErrorMenu(): string {
    return "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∑–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∏–º, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–æ–±–æ—Ç—ã.";
  }

  createMovieMenu(fields: MovieDetail): string {
    const genres: string[] = fields.genres.map((genre) => genre.name);

    return (
      `${fields.title}\n\n` +
      `–ñ–∞–Ω—Ä: ${genres.join(", ")}\n` +
      `–†–µ–π—Ç–∏–Ω–≥: ${fields.vote_average || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"}\n` +
      `–í—ã—à–µ–ª: ${fields.status}\n` +
      `–û–ø–∏—Å–∞–Ω–∏–µ:\n${fields.overview}`
    );
  }

  updateMenuText(bot: Telegraf<IBotContext>, userId: number, data: "menu" | "filter" | "movie", id?: string): void {
    const uniqueNumber: number = new Date().getTime();
    bot.handleUpdate({
      update_id: uniqueNumber,
      callback_query: {
        id: id || uniqueNumber.toString(),
        from: { 
          id: userId, 
          is_bot: false, 
          first_name: uniqueNumber.toString()
        }, 
        message: undefined,
        chat_instance: uniqueNumber.toString(),
        data
      }
    });
  }
}