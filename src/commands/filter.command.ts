import { Markup, Telegraf } from "telegraf";
import { Command } from "./command.class";
import { IBotContext } from "../context/context.interface";
import { ISessionService } from "../service/session.interface";
import { BUTTONS } from "../config/buttons";

export default class FilterCommand extends Command {
  constructor(bot: Telegraf<IBotContext>, session: ISessionService) { 
    super(bot);
    this.session = session;
  }

  handle(): void {
    if(!BUTTONS.filterMenu.switchToInline || !BUTTONS.filterMenu.buttons) {
      throw new Error("Cant find buttons");
    }

    const inlineButtons = BUTTONS.filterMenu.switchToInline.map(button => 
      Markup.button.switchToCurrentChat(button.name, button.value)
    );

    const buttons = BUTTONS.filterMenu.buttons.map(button => 
      Markup.button.callback(button.name, button.value)
    );

    const allButtons = [...inlineButtons, ...buttons];

    this.bot.action("filter", async(ctx) => {
      const userId = String(ctx.from?.id);
      const session = await this.session?.findById(userId);

      ctx.editMessageText(
        "–ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤\n\n" +
        "–í—ã–±–µ—Ä–∏ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –∂–º–∏ \"–ò—Å–∫–∞—Ç—å –ø–æ —Ñ–∏–ª—å—Ç—Ä—É\`\n\n" +
        "–í—ã–±—Ä–∞–Ω–æ:\n" +
        `üìà –†–µ–π—Ç–∏–Ω–≥: ${session?.minRating} - ${session?.maxRating}\n` +
        `üìÖ –ù–∞—á–∏–Ω–∞—è —Å –≥–æ–¥–∞: ${session?.startYear}\n` +
        `üìÜ –î–æ –≥–æ–¥–∞: ${session?.endYear}\n` +
        `üéµ –ñ–∞–Ω—Ä: ${session?.genre || "–í—Å–µ"}\n` +
        `üîÄ –¢–∏–ø: ${session?.type || "–í—Å–µ"}\n`
      , Markup.inlineKeyboard(allButtons, { columns: 2 }));
    });
  }
}